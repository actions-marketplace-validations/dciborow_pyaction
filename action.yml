name: 'Run Actions based for Python Project'
description: 'Run actions for Python Project with reviewdog on pull requests to improve code review experience.'
author: 'dciborow'
inputs:
  black:
    description: |
      Run Black
      Default is false.
    default: 'false'
  bandit:
    description: |
      Run Bandit
      Default is false.
    default: 'false'
  pylint:
    description: |
      Run Pylint
      Default is false.
    default: 'false'
  pyright:
    description: |
      Run Pyright
      Default is false.
    default: 'false'
  flake8:
    description: |
      Run Flake8
      Default is false.
    default: 'false'
  testing:
    description: |
      Run tests with PyTest
      Default is false.
    default: false
  publish:
    description: |
      Publish to PyPi
      Default is false
    default: 'false'
  publish_url:
    description: |
      PyPi Target. Use this to point to private or test locations.      
      Default https://pypi.org
    defualt: 'https://pypi.org'
  github_token:
    description: 'GITHUB_TOKEN'
    default: '${{ github.token }}'
  workdir:
    description: 'Working directory relative to the root directory.'
    default: 'src'
  ### Flags for reviewdog ###
  level:
    description: 'Report level for reviewdog [info,warning,error]'
    default: 'error'
  reporter:
    description: 'Reporter of reviewdog command [github-pr-check,github-pr-review].'
    default: 'github-pr-check'
  filter_mode:
    description: |
      Filtering mode for the reviewdog command [added,diff_context,file,nofilter].
      Default is added.
    default: 'added'
  fail_on_error:
    description: |
      Exit code for reviewdog when errors are found [true,false]
      Default is `false`.
    default: 'false'
  reviewdog_flags:
    description: 'Additional reviewdog flags'
    default: ''
  toml:
    description: |
      pyproject.toml location.
      Default pyproject.toml
    default: 'pyproject.toml'
  pylint_rc:
    description: '.pylintrc configuration file'
    default: '.pylintrc'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - if: ${{ inputs.black }} == 'true'
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "--config ${{ inputs.toml }} ${{ inputs.workdir }}"
    - if: steps.action_black.outputs.is_formatted == 'true'
      uses: reviewdog/action-suggester@v1
      with:
        tool_name: blackfmt
        fail_on_error: true

    - if: ${{ inputs.bandit }} == 'true'
      uses: jpetrucciani/bandit-check@1.6.2
    
    - if: ${{ inputs.flake8 }} == 'true'
      uses: reviewdog/action-flake8@v3
      with:
        github_token: ${{ inputs.github_token }}
        workdir: ${{ inputs.workdir }}
    
    - if: ${{ inputs.pylint }} == 'true'
      uses: dciborow/action-pylint@0.0.3
      with:
        github_token: ${{ inputs.github_token }}
        workdir: ${{ inputs.workdir }}
    
    - if: ${{ inputs.pyright }} == 'true'
      uses: jakebailey/pyright-action@v1.1.0
      with:
        project: ${{ inputs.toml }}

    - if: ${{ inputs.testing }} == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        cache: 'pip'
    - if: ${{ inputs.testing }} == 'true'
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest flit
        python -m flit install
      shell: bash
    - if: ${{ inputs.testing }} == 'true'
      name: Pytest / Unit Tests
      run: |
        python -m pytest -m "not integration and not gpu" tests
      shell: bash
    - if: ${{ inputs.testing }} == 'true'
      name: Pytest / Integration Tests
      run: |
        python -m pytest -m "integration" tests
      shell: bash
# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: 'check'
  color: 'blue'
